version: 2.1
executors:
  circleci-ruby-executor:
    docker:
      - image: circleci/ruby:2.5.3-stretch
      - image: circleci/redis:5.0.3-stretch
jobs:
  build:
    working_directory: ~/hot-custard-payments
    environment:
      BUNDLE_PATH: vendor/bundle  # path to install gems and use for caching
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    executor: circleci-ruby-executor
    steps:

    - checkout

    - run:
        name: install dockerize
        command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        environment:
          DOCKERIZE_VERSION: v0.3.0
    - run:
        name: Wait for db
        command: dockerize -wait tcp://localhost:6379 -timeout 1m

    - run:
        name: Which bundler?
        command: bundle -v

    - restore_cache:
        keys:
        # when lock file changes, use increasingly general patterns to restore cache
          - v2.5.3-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          - v2.5.3-gem-cache-{{ arch }}-{{ .Branch }}-
          - v2.5.3-gem-cache-{{ arch }}-

    - run: bundle check || bundle install && bundle clean

    - save_cache:
        paths:
          - vendor/bundle
        key: v2.5.3-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

    - run:
        name: Populate datastore
        command: |
          bundle exec ruby populate_datastore.rb

    # Test
    # This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run:
        name: Run tests
        command: |
          bundle exec rspec --format progress --format RspecJunitFormatter -o $CIRCLE_TEST_REPORTS/rspec.xml

  deploy:
    executor: circleci-ruby-executor
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
